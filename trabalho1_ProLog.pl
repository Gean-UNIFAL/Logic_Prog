%_____________________________________________________________________________________
%Trabalho 01 - ProgramaÃ§Ã£o LÃ³gica
%Docente: Luiz Eduardo da Silva
%Objetivo: Fazer um programa que implemente uma soluÃ§Ã£o ao problema dos missionÃ¡rios
%		   e canibais, dados a quantidade de missionÃ¡rios/canibais e a capacidade do 
%		   barco
%Discente: Gean Marques
%MatrÃ­cula: 2019.1.08.006
%_____________________________________________________________________________________
%ImplementaÃ§Ã£o do estado seguro:
%ImplementaÃ§Ã£o do estado seguro geral:
seguro(M, C) :-
    M >= C;
    M == 0.

%ImplementaÃ§Ã£o do estado seguro em cada lado do rio:
%Legenda:	M/C   -> MissionÃ¡rios/Canibais
%			ME/CE -> MissionÃ¡rios/Canibais do lado esquerdo;
%			MD/CD -> MissionÃ¡rios/Canibais do lado direito.
estado_seguro(estado(ME, CE, MD, CD, _)) :-
    seguro(ME, CE),
    seguro(MD, CD).

%_____________________________________________________________________________________
%ImpelementaÃ§Ã£o dos movimentos possÃ­veis para os barcos/pessoas:
%O primeiro 'estado' representa o estado inicial da operaÃ§Ã£o;
%o segundo 'estado' representa o estado final, apÃ³s a operaÃ§Ã£o ser realizada.
%Cap representa a capacidade total do barco.
%'a' e 'b' representam a posiÃ§Ã£o do barco naquele estado.
%Cada predicado mover/3 transfere o barco de uma margem Ã  outra, por isso hÃ¡ 2.
%1Âº between garante que o barco farÃ¡ o transporte com, no mÃ­nimo, 1 pessoa
%presente e, no mÃ¡ximo, a sua capacidade total.
%2Âº between define quantos missionÃ¡rios (M), irÃ£o no barco; entre total e 0.
mover(estado(ME, CE, MD, CD, a), estado(NME, NCE, NMD, NCD, b), Cap) :-
    between(1, Cap, Total),
    between(0, Total, M),
    C is Total - M,
    %Garantia de que hÃ¡ M/C suficientes para o embarque:
    ME >= M, CE >= C,
    %CÃ¡lculos do novo estado:
    NME is ME - M, NCE is CE - C,
    NMD is MD + M, NCD is CD + C,
    %Garantia de que o novo estado Ã© seguro:
    estado_seguro(estado(NME, NCE, NMD, NCD, b)).

%ComentÃ¡rios relativos ao funcionamento acima; a Ãºnica diferenÃ§a Ã© a posiÃ§Ã£o atual
%do barco.
mover(estado(ME, CE, MD, CD, b), estado(NME, NCE, NMD, NCD, a), Cap) :-
    between(1, Cap, Total),
    between(0, Total, M),
    C is Total - M,
    MD >= M, CD >= C,
    NMD is MD - M, NCD is CD - C,
    NME is ME + M, NCE is CE + C,
    estado_seguro(estado(NME, NCE, NMD, NCD, a)).

%_____________________________________________________________________________________
%ImplementaÃ§Ã£o da execuÃ§Ã£o do programa:
%Legenda:	N 			-> NÃºmero de missionÃ¡rios/canibais no estado inicial;
%			Cap 		-> Capacidade total do barco;
%			EstadoFinal -> Ãšltimo estado do barco
solucao(N, Cap, EstadoFinal) :-
    %Estado inicial, com nÃºmero de M/C refletido.
    EstadoInicial = estado(N, N, 0, 0, a),
    %Estado final, desejado.
    EstadoObjetivo = estado(0, 0, N, N, b),
    %Chamada da busca recursiva para encontrar os estados:
    busca(EstadoInicial, EstadoObjetivo, Cap, [EstadoInicial], Solucao),
    %Reverso da lista, explicaÃ§Ã£o nas notas:
    reverse(SolucaoReversa, Solucao),
    %ImpressÃ£o das iteraÃ§Ãµes passo-a-passo e do Ãºltimo estado:
    imprimir_caminho(SolucaoReversa, Cap),
	last(SolucaoReversa, EstadoFinal).

%_____________________________________________________________________________________
%ImplementaÃ§Ã£o da busca recursiva dos estados.
%Fato:
busca(Estado, Estado, _, Visitados, Visitados).
%Regra: passando como parÃ¢metros o estado atual e objetivo, a capacidade do barco,
%os estados jÃ¡ visitados e a soluÃ§Ã£o, que Ã© composta dos estados visitados junto
%do novo estado encontrado para a soluÃ§Ã£o.
busca(Atual, Objetivo, Cap, Visitados, Solucao) :-
    mover(Atual, Proximo, Cap),
    %Para evitar um loop, temos a garantia de que o estado atual ainda nÃ£o foi
    %visitado atravÃ©s da checagem:
    \+ member(Proximo, Visitados),
    %Chamada recursiva:
    busca(Proximo, Objetivo, Cap, [Proximo|Visitados], Solucao).

%_____________________________________________________________________________________
%ImplementaÃ§Ã£o da visualizaÃ§Ã£o do problema de forma mais clara.
%Imagino que o erro da nota (2) esteja aqui (nÃ£o estava).
imprimir_caminho([], _).
imprimir_caminho([H|T], Cap) :-
    desenha(H, Cap),
    nl,
    %Chamada recursiva da impressÃ£o:
    imprimir_caminho(T, Cap).

%Predicado recursivo para substuir M/C por sÃ­mbolos, muito importante!
repete(_, 0).
repete(Simbolo, N) :-
    N > 0,
    write(Simbolo),
    N1 is N - 1,
    repete(Simbolo, N1).

%Desenho quando o barco estÃ¡ do lado esquerdo.
desenha(estado(ME, CE, MD, CD, a), _) :-
    write('Margem Esquerda: '),
    repete('ğŸ‘¨', ME),
    repete('ğŸ˜ˆ', CE),
    write('   ğŸš£ ~~~~~~~~   '),
    repete('ğŸ‘¨', MD),
    repete('ğŸ˜ˆ', CD),
    write(' :Margem Direita'), nl.

%Desenho quando o barco estÃ¡ do lado direito.
desenha(estado(ME, CE, MD, CD, b), _) :-
    write('Margem Esquerda: '),
    repete('ğŸ‘¨', ME),
    repete('ğŸ˜ˆ', CE),
    write('   ~~~~~~~~ ğŸš£   '),
    repete('ğŸ‘¨', MD),
    repete('ğŸ˜ˆ', CD),
    write(' :Margem Direita'), nl.

%_____________________________________________________________________________________
%Interessante:																		  
%(1) mesmo que o barco possa levar atÃ© 3 pessoas, como o algoritmo trabalha como
%uma busca em Ã¡rvore de estados, Ã© provÃ¡vel que ele irÃ¡ optar pela opÃ§Ã£o de levar
%apenas 2 pessoas atÃ© que seja obrigatÃ³rio o uso de 3 para chegar a um estado seguro.
%Isso fica claro no uso do between e ao usarmos um barco com capacidade maior, mas
%com a mesma quantidade de pessoas.
%(2) por alguma razÃ£o, a busca estava invertendo o lado direito com o esquerdo.
%Para evitar um trabalho maior, adicionei um reverse na impressÃ£o e deu tudo certo.
%Depois de um tempo refletindo, pensei em solucionar usando append para construir
%a lista de soluÃ§Ãµes dentro do predicado busca, porÃ©m, visto que o resultado nÃ£o
%seria alterado, preferi deixar como estÃ¡.
%(3) a ideia do uso de sÃ­mbolos (emojis) na representaÃ§Ã£o veio quando pedi ao
%ChatGPT para realizar a organizaÃ§Ã£o das etapas de forma mais visual. Decidi
%manter dessa forma.
%_____________________________________________________________________________________